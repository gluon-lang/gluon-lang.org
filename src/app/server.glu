let { map } = import! std.functor
let { (<<), (<|), (|>) } = import! std.function
let { (<*), (*>), when, wrap } = import! std.applicative
let { empty, (<|>) } = import! std.alternative
let http @ { HttpEffect, Response, Request, get, post, path, is_match, uri, ? } = import! std.http
let io = import! std.effect.io
let monad_io @ { ? } = import! std.io
let string = import! std.string
let { ? } = import! std.array
let path_mod @ { Component } = import! std.path
let { any, foldl } = import! std.foldable
let { Result, ? } = import! std.result
let array @ { ? } = import! std.array
let { ? } = import! std.path
let { (<>) } = import! std.semigroup
let fs = import! std.fs
let json_ser @ { Serialize, ? } = import! std.json.ser
let json_de @ { Deserialize, ? } = import! std.json.de
let regex = import! std.regex
let option = import! std.option
let result = import! std.result
let { for } = import! std.traversable
let process = import! std.process
let thread = import! std.thread
let { Eff, ? } = import! std.effect
let { Lift, lift, run_lift } = import! std.effect.lift

let try_gluon = import! gluon.try
let try_gluon_master = import! gluon.try.master
let github_mod = import! github
let { Opts, log } = import! gluon.http_server

let dist_dir = "./target/dist/"

let hello_world : Eff (HttpEffect r) Response =
    http.write_response (string.as_bytes "Hello World") *> (wrap { status = http.status.ok,
                .. http.response
            })

let content_type_for_file file =
    do ext = path_mod.extension file
    match ext with
    | "html" -> Some "text/html"
    | "js" -> Some "text/javascript"
    | "css" -> Some "text/css"
    | _ -> None

let serve_file request_path : String -> Eff (HttpEffect r) Response =
    let open_file =
        do metadata = path_mod.metadata request_path
        let file_path =
            if fs.metadata.is_file metadata then request_path
            else path_mod.join request_path "index.html"

        do contents = monad_io.read_file_to_array file_path
        wrap (contents, file_path)

    do result = io.catch (map Ok open_file) (wrap << Err)
    match result with
    | Ok (contents, file_path) ->
        let headers =
            match content_type_for_file file_path with
            | Some content_type -> [("Content-Type", string.as_bytes content_type)]
            | None -> []
        seq http.write_response contents
        wrap { status = http.status.ok, headers,
                .. http.response
            }
    | Err err ->
        if string.contains err "The system cannot find the file"
            || string.contains err "No such file"
        then
            let path_404 = path_mod.join dist_dir "404.html"
            if request_path /= path_404 then
                do response = serve_file path_404
                wrap {
                    status = http.status.not_found,
                    headers = response.headers,
                }
            else
                wrap {
                    status = http.status.not_found,
                    .. http.response
                }
        else
            seq lift (log.info ("Error opening file: " ++ request_path ++ "\n" ++ err))
            wrap {
                status = http.status.internal_server_error,
                .. http.response
            }

let static_files base : String -> Eff (HttpEffect r) Response =
    let detect_path_traversal uri : String -> Bool =
        any (\c ->
            match c with
            | Normal _ -> False
            | _ -> True)
            (path_mod.components uri)

    do request = http.get_request
    let uri = string.trim_start_matches (uri.path request.uri) "/"
    if detect_path_traversal uri then
        wrap { status = http.status.bad_request,
                .. http.response
            }
    else
        let request_path = path_mod.join base uri
        serve_file request_path

let array_body request : Request -> Eff (HttpEffect r) (Array Byte) =
    do chunk = http.read_chunk request.body
    match chunk with
    | Some chunk ->
        do rest = array_body request
        wrap (chunk <> rest)
    | None -> wrap []


let try_vm_released = try_gluon.make_eval_vm ()
let try_vm_master = try_gluon_master.make_eval_vm ()

let gluon_handler eval : [Serialize a] -> (String -> Result String a) -> Eff (HttpEffect r) Response
    =
    do request = http.get_request
    do body = array_body request
    match string.from_utf8 body with
    | Err err ->
        seq http.write_response (string.as_bytes "Invalid UTF-8")
        wrap { status = http.status.bad_request,
                .. http.response
            }
    | Ok code ->
        let (response_body, status) =
            match eval code with
            | Ok response ->
                match json_ser.to_string response with
                | Ok s -> (s, http.status.ok)
                | Err s -> (s, http.status.internal_server_error)
            | Err response_body -> (response_body, http.status.internal_server_error)

        seq http.write_response <| string.as_bytes response_body
        wrap { status,
                .. http.response
            }


#[derive(Deserialize)]
type Gist = { code : String }

#[derive(Serialize)]
type PostGist = { id : String, html_url : String }

let share_handler opts : Opts -> _ =
    match opts.gist_access_token with
    | Some gist_access_token ->
        let github = github_mod.new_github gist_access_token
        gluon_handler (\gist_str ->
            do gist = json_de.deserialize gist_str
            github_mod.share github gist)
    | None ->
        http.write_response (string.as_bytes "Sharing is not enabled")
            *> wrap { status = http.status.internal_server_error,
                    .. http.response
                }


let load_config =
    do lock_file_result
        = monad_io.catch (map Ok (monad_io.read_file_to_string "Cargo.lock")) (wrap << Err)
    let lock_file_contents =
        match lock_file_result with
        | Ok x -> x
        | Err err -> error ("Unable to open `Cargo.lock`: " <> show err)
    let get_version_by_regex re_str : String -> String =
        let match_ =
            regex.new re_str |> result.unwrap_ok |> (\re -> regex.captures re lock_file_contents)
                |> option.unwrap
                |> (\captures -> array.index captures 1)
                |> option.unwrap
        match_.text

    let git_master =
        get_version_by_regex "git\\+[^#]+gluon#([^\"]+)"
            |> (\revision -> string.slice revision 0 6)
    let last_release = get_version_by_regex r#""gluon"\s+version = "([^ ]+).+"\s+source = "registry"#

    do examples =
        do dir_entries = fs.read_dir "public/examples"
        for dir_entries (\entry ->
            let example_path = fs.dir_entry.path entry
            let name = path_mod.file_stem example_path |> option.unwrap
            do src = monad_io.read_file_to_string example_path
            wrap { name, src })

    #[derive(Serialize)]
    type Example = { name : String, src : String }

    #[derive(Serialize)]
    type Config = { last_release : String, git_master : String, examples : Array Example }

    let config : Config = {
        last_release,
        git_master,
        examples,
    }
    wrap (json_ser.to_string config |> result.unwrap_ok)


let when b f : [Monad m] -> Bool -> (() -> m ()) -> m () =
    if b then f () else wrap ()

let tls_cert = "identity.p12"
let setup_cert opts : Opts -> IO () =
    let cert_path = path_mod.join "/etc/letsencrypt/live/" opts.host
    let base_args = ["certonly",
        "--standalone",
        "-d",
        opts.host,
        "-m",
        "marwes91@gmail.com",
        "--agree-tos",
        "-n"]
    let args =
        if opts.staging then base_args <> ["--staging"]
        else base_args
    do status = process.execute (process.proc "certbot" args)
    seq when (status /= Some 0) (\_ -> error "Unable to retrieve the certificate")

    do status = process.execute (process.proc "openssl"
                ["pkcs12",
                "-out",
                tls_cert,
                "-inkey",
                path_mod.join cert_path "privkey.pem",
                "-in",
                path_mod.join cert_path "fullchain.pem",
                "-export",
                "-passout",
                "pass:"])
    seq when (status /= Some 0) (\_ -> error ("Unable to convert the certificate: " ++ show status))
    wrap ()

let load_handler opts : Opts -> IO _ =
    do config = load_config

    let handler =
        foldl (<|>) empty
            [get *> path "/try/config" *> http.write_response (string.as_bytes config)
                *> wrap { status = http.status.ok,
                        .. http.response
                    },
            get *> is_match "^/.*"
                *> static_files dist_dir,
            post *> path "/try/share"
                *> share_handler opts,
            post *> path "/try/eval"
                *> gluon_handler (\code -> try_gluon.eval try_vm_released code),
            post *> path "/try/format"
                *> gluon_handler (\code -> try_gluon.format_expr try_vm_released code),
            post *> path "/try/master/eval"
                *> gluon_handler (\code -> try_gluon_master.eval try_vm_master code),
            post *> path "/try/master/format"
                *> gluon_handler (\code -> try_gluon_master.format_expr try_vm_master code)]

    let handler =
        lift (log.debug "Received request") *> handler
            <* lift (log.debug "Responded to request")

    wrap handler

let start opts : Opts -> IO () =
    do handler = load_handler opts

    let port =
        match opts.port with
        | None -> if opts.https then 443 else 80
        | Some port -> port

    if opts.https then
        seq setup_cert opts

        let http_server_settings = { port = 80, tls_cert = None }
        let http_redirect_handler : Eff (HttpEffect r) Response =
            wrap {
                    status = http.status.permanent_redirect,
                    headers = [("Location", string.as_bytes ("https://" ++ opts.host))],
                    ..
                    http.response
                }

        let https_server_settings = { port, tls_cert = Some tls_cert }

        seq monad_io.println ("Opening https server on port " ++ show port)
        thread.join
            (run_lift <| http.listen http_server_settings http_redirect_handler)
            (run_lift <| http.listen https_server_settings handler)
            *> wrap ()
    else
        let server_settings = { port, tls_cert = None }
        seq monad_io.println ("Opening http server on port " ++ show port)
        run_lift (http.listen server_settings handler)

{
    start,
    load_handler,
}
